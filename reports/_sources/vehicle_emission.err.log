Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/asyncio/base_events.py", line 685, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import csv
import sqlite3

# connecting the server
conn = sqlite3.connect("vehicle_emission.db")
cursor = conn.cursor()

# table creation
cursor.execute("""
CREATE TABLE IF NOT EXISTS Vehicle (
    VehicleID INTEGER PRIMARY KEY AUTOINCREMENT,
    VehicleType TEXT,
    FuelType TEXT,
    EngineSize REAL,
    AgeOfVehicle INTEGER
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS Emission (
    EmissionID INTEGER PRIMARY KEY AUTOINCREMENT,
    VehicleID INTEGER,
    CO2Emissions REAL,
    NOxEmissions REAL,
    PM25Emissions REAL,
    VOCEmissions REAL,
    SO2Emissions REAL,
    EmissionLevel TEXT,
    FOREIGN KEY (VehicleID) REFERENCES Vehicle(VehicleID)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS Environment (
    EnvironmentID INTEGER PRIMARY KEY AUTOINCREMENT,
    VehicleID INTEGER,
    RoadType TEXT,
    TrafficConditions TEXT,
    Temperature REAL,
    Humidity REAL,
    WindSpeed REAL,
    AirPressure REAL,
    FOREIGN KEY (VehicleID) REFERENCES Vehicle(VehicleID)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS Performance (
    PerformanceID INTEGER PRIMARY KEY AUTOINCREMENT,
    VehicleID INTEGER,
    Mileage INTEGER,
    Speed REAL,
    Acceleration REAL,
    FOREIGN KEY (VehicleID) REFERENCES Vehicle(VehicleID)
)
""")

# reading dataset from csv and inserting into the tables

with open("vehicle_emission_dataset.csv", "r") as file:
    reader = csv.DictReader(file)
    
    for row in reader:
        # Insert into Vehicle table
        cursor.execute("""
        INSERT INTO Vehicle (VehicleType, FuelType, EngineSize, AgeOfVehicle)
        VALUES (?, ?, ?, ?)
        """, (row["Vehicle Type"], row["Fuel Type"], float(row["Engine Size"]), int(row["Age of Vehicle"])))
        
        vehicle_id = cursor.lastrowid  # Get the last inserted Vehicle ID
        
        # Insert into Emission table
        cursor.execute("""
        INSERT INTO Emission (VehicleID, CO2Emissions, NOxEmissions, PM25Emissions, VOCEmissions, SO2Emissions, EmissionLevel)
        VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (
            vehicle_id, float(row["CO2 Emissions"]), float(row["NOx Emissions"]), float(row["PM2.5 Emissions"]),
            float(row["VOC Emissions"]), float(row["SO2 Emissions"]), row["Emission Level"]
        ))
        
        # Insert into Environment table
        cursor.execute("""
        INSERT INTO Environment (VehicleID, RoadType, TrafficConditions, Temperature, Humidity, WindSpeed, AirPressure)
        VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (
            vehicle_id, row["Road Type"], row["Traffic Conditions"], float(row["Temperature"]),
            float(row["Humidity"]), float(row["Wind Speed"]), float(row["Air Pressure"])
        ))
        
        # Insert into Performance table
        cursor.execute("""
        INSERT INTO Performance (VehicleID, Mileage, Speed, Acceleration)
        VALUES (?, ?, ?, ?)
        """, (
            vehicle_id, int(row["Mileage"]), float(row["Speed"]), float(row["Acceleration"])
        ))

# commit changes and closing connections
conn.commit()
conn.close()

print("Database created and data inserted successfully.")

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[2], line 60[0m
[1;32m     47[0m cursor[38;5;241m.[39mexecute([38;5;124m"""[39m
[1;32m     48[0m [38;5;124mCREATE TABLE IF NOT EXISTS Performance ([39m
[1;32m     49[0m [38;5;124m    PerformanceID INTEGER PRIMARY KEY AUTOINCREMENT,[39m
[0;32m   (...)[0m
[1;32m     55[0m [38;5;124m)[39m
[1;32m     56[0m [38;5;124m"""[39m)
[1;32m     58[0m [38;5;66;03m# reading dataset from csv and inserting into the tables[39;00m
[0;32m---> 60[0m [38;5;28;01mwith[39;00m [38;5;28mopen[39m([38;5;124m"[39m[38;5;124mvehicle_emission_dataset.csv[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mr[39m[38;5;124m"[39m) [38;5;28;01mas[39;00m file:
[1;32m     61[0m     reader [38;5;241m=[39m csv[38;5;241m.[39mDictReader(file)
[1;32m     63[0m     [38;5;28;01mfor[39;00m row [38;5;129;01min[39;00m reader:
[1;32m     64[0m         [38;5;66;03m# Insert into Vehicle table[39;00m

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/IPython/core/interactiveshell.py:324[0m, in [0;36m_modified_open[0;34m(file, *args, **kwargs)[0m
[1;32m    317[0m [38;5;28;01mif[39;00m file [38;5;129;01min[39;00m {[38;5;241m0[39m, [38;5;241m1[39m, [38;5;241m2[39m}:
[1;32m    318[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m    319[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mIPython won[39m[38;5;124m'[39m[38;5;124mt let you open fd=[39m[38;5;132;01m{[39;00mfile[38;5;132;01m}[39;00m[38;5;124m by default [39m[38;5;124m"[39m
[1;32m    320[0m         [38;5;124m"[39m[38;5;124mas it is likely to crash IPython. If you know what you are doing, [39m[38;5;124m"[39m
[1;32m    321[0m         [38;5;124m"[39m[38;5;124myou can use builtins[39m[38;5;124m'[39m[38;5;124m open.[39m[38;5;124m"[39m
[1;32m    322[0m     )
[0;32m--> 324[0m [38;5;28;01mreturn[39;00m io_open(file, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'vehicle_emission_dataset.csv'

